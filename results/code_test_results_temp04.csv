task,sample_num,extracted_code,average_percentage_correct,count_perfect_scores
75b8110e,1,,0.0,0
75b8110e,2,"def transform(input_grid):
    # Extract all non-zero values from the input grid
    non_zero_values = [value for row in input_grid for value in row if value != 0]

    # Create a 4x4 output grid
    output_grid = [[0] * 4 for _ in range(4)]

    # Rearrange the extracted values into the output grid
    index = 0
    for i in range(4):
        for j in range(4):
            if index < len(non_zero_values):
                output_grid[i][j] = non_zero_values[index]
                index += 1

    return output_grid",0.274,0
75b8110e,3,"def transform(input_grid):
    # Define the output grid size
    output_size = 4

    # Create an empty output grid
    output_grid = [[0] * output_size for _ in range(output_size)]

    # Define the mapping from input positions to output positions
    mapping = {
        (0, 0): (0, 0), (0, 1): (0, 1), (0, 2): (0, 2), (0, 3): (0, 3),
        (1, 0): (1, 0), (1, 1): (1, 1), (1, 2): (1, 2), (1, 3): (1, 3),
        (2, 0): (2, 0), (2, 1): (2, 1), (2, 2): (2, 2), (2, 3): (2, 3),
        (3, 0): (3, 0), (3, 1): (3, 1), (3, 2): (3, 2), (3, 3): (3, 3),
        (4, 0): (0, 0), (4, 1): (0, 1), (4, 2): (0, 2), (4, 3): (0, 3),
        (5, 0): (1, 0), (5, 1): (1, 1), (5, 2): (1, 2), (5, 3): (1, 3),
        (6, 0): (2, 0), (6, 1): (2, 1), (6, 2): (2, 2), (6, 3): (2, 3),
        (7, 0): (3, 0), (7, 1): (3, 1), (7, 2): (3, 2), (7, 3): (3, 3)
    }

    # Populate the output grid based on the mapping
    for i in range(len(input_grid)):
        for j in range(len(input_grid[i])):
            if input_grid[i][j] != 0:
                output_pos = mapping.get((i, j), None)
                if output_pos:
                    output_grid[output_pos[0]][output_pos[1]] = input_grid[i][j]

    return output_grid",0.46399999999999997,0
75b8110e,4,,0.0,0
75b8110e,5,"def transform(input_grid):
    output_grid = [[0, 0, 0, 0] for _ in range(4)]

    # Define the positions to extract from the input grid
    positions = [
        (0, 0), (0, 1), (0, 6), (0, 7),
        (1, 0), (1, 1), (1, 6), (1, 7),
        (2, 2), (2, 3), (2, 6), (2, 7),
        (3, 3), (3, 4), (3, 5), (3, 6)
    ]

    # Extract elements from the input grid and place them in the output grid
    for i, (row, col) in enumerate(positions):
        output_row = i // 4
        output_col = i % 4
        output_grid[output_row][output_col] = input_grid[row][col]

    return output_grid",0.324,0
3618c87e,1,,0.0,0
3618c87e,2,"def transform(grid):
    rows = len(grid)
    cols = len(grid[0])

    # Create a copy of the grid to store the transformed grid
    transformed_grid = [row[:] for row in grid]

    # Iterate over each row in the grid
    for i in range(rows):
        # Find the positions of 1s and 5s in the current row
        ones = [j for j in range(cols) if grid[i][j] == 1]
        fives = [j for j in range(cols) if grid[i][j] == 5]

        # Move 1s to the rightmost positions
        for j in ones:
            transformed_grid[i][j] = 0
        for j in range(len(ones)):
            transformed_grid[i][cols - 1 - j] = 1

        # Move 5s to the leftmost positions
        for j in fives:
            transformed_grid[i][j] = 0
        for j in range(len(fives)):
            transformed_grid[i][j] = 5

    return transformed_grid",0.7866666666666667,0
3618c87e,3,,0.0,0
3618c87e,4,"def transform(grid):
    rows = len(grid)
    cols = len(grid[0])

    # Create a new grid with the same dimensions
    new_grid = [[0] * cols for _ in range(rows)]

    # Iterate over the grid to find the positions of 1s and 5s
    for r in range(rows):
        for c in range(cols):
            if grid[r][c] == 1:
                # Move 1 to the rightmost position in its row
                new_grid[r][cols - 1] = 1
            elif grid[r][c] == 5:
                # Move 5 to the leftmost position in its row
                new_grid[r][0] = 5

    return new_grid",0.6933333333333334,0
3618c87e,5,"def transform(grid):
    # Find the positions of 1s and 5s in the bottom half of the grid
    ones = []
    fives = []
    for i in range(len(grid)):
        for j in range(len(grid[i])):
            if grid[i][j] == 1:
                ones.append((i, j))
            elif grid[i][j] == 5:
                fives.append((i, j))

    # Move the 1s to the rightmost positions in the entire grid
    for i, j in ones:
        grid[i][j] = 0
        grid[i][len(grid[i]) - 1] = 1

    # Move the 5s to the leftmost positions in the entire grid
    for i, j in fives:
        grid[i][j] = 0
        grid[i][0] = 5

    return grid",0.6933333333333334,0
3ac3eb23,1,"def transform(input_grid):
    if not input_grid:
        return []

    output_grid = [row[:] for row in input_grid]

    for i in range(1, len(input_grid)):
        for j in range(len(input_grid[i])):
            if j % 2 == 0:
                output_grid[i][j] = output_grid[i-1][j]
            else:
                output_grid[i][j] = 0

    return output_grid",0.77,0
3ac3eb23,2,"def transform(input_grid):
    if not input_grid:
        return []

    output_grid = []
    first_row = input_grid[0]

    for i in range(len(input_grid)):
        if i % 2 == 0:
            output_grid.append(first_row)
        else:
            shifted_row = [0] * len(first_row)
            for j in range(len(first_row)):
                shifted_row[(j + 1) % len(first_row)] = first_row[j]
            output_grid.append(shifted_row)

    return output_grid",0.915,0
3ac3eb23,3,"def transform(grid):
    num_rows = len(grid)
    num_cols = len(grid[0])

    # Create a new grid with the same dimensions
    transformed_grid = [[0] * num_cols for _ in range(num_rows)]

    # Copy the first row as is
    transformed_grid[0] = grid[0]

    # Fill the subsequent rows based on the pattern
    for i in range(1, num_rows):
        for j in range(num_cols):
            if j % 2 == 0:
                transformed_grid[i][j] = grid[0][j]
            else:
                transformed_grid[i][j] = grid[0][j]

    return transformed_grid",0.745,0
3ac3eb23,4,"def transform(input_grid):
    if not input_grid:
        return []

    output_grid = [row[:] for row in input_grid]

    for i in range(1, len(input_grid)):
        output_grid[i][0] = input_grid[i-1][1]
        output_grid[i][4] = input_grid[i-1][5]

    return output_grid",0.8,0
3ac3eb23,5,"def transform(input_grid):
    if not input_grid:
        return []

    output_grid = []
    num_rows = len(input_grid)
    num_cols = len(input_grid[0])

    # Copy the first row directly
    output_grid.append(input_grid[0])

    for i in range(1, num_rows):
        new_row = [0] * num_cols
        if i % 2 == 1:
            # Odd rows: shift right by one position and fill the first position with the first element of the previous row
            new_row[0] = input_grid[i-1][0]
            for j in range(1, num_cols):
                new_row[j] = input_grid[i-1][j-1]
        else:
            # Even rows: shift left by one position and fill the last position with the last element of the previous row
            new_row[-1] = input_grid[i-1][-1]
            for j in range(num_cols - 1):
                new_row[j] = input_grid[i-1][j+1]
        output_grid.append(new_row)

    return output_grid",0.8,0
3c9b0459,1,"def transform(grid):
    # Sort each row in ascending order
    for i in range(len(grid)):
        grid[i].sort()
    return grid",0.47250000000000003,0
3c9b0459,2,"def transform(grid):
    def sort_and_swap(row):
        sorted_row = sorted(row)
        if sorted_row[0] != row[0] and sorted_row[-1] != row[-1]:
            sorted_row[0], sorted_row[-1] = sorted_row[-1], sorted_row[0]
        return sorted_row

    return [sort_and_swap(row) for row in grid]",0.47250000000000003,0
3c9b0459,3,"def transform(grid: list[list[int]]) -> list[list[int]]:
    # Sort each row in ascending order
    for i in range(len(grid)):
        grid[i].sort()
    return grid",0.47250000000000003,0
3c9b0459,4,,0.0,0
3c9b0459,5,"def transform(grid):
    def custom_sort(row):
        sorted_row = sorted(row)
        return [sorted_row[0]] + sorted_row[1:-1] + [sorted_row[-1]]

    return [custom_sort(row) for row in grid]",0.47250000000000003,0
ba97ae07,1,,0.0,0
ba97ae07,2,"def transform(grid):
    # Get the dimensions of the grid
    rows = len(grid)
    cols = len(grid[0])

    # Iterate over each row
    for i in range(rows):
        # Find the most frequent value in the row
        most_frequent_value = max(set(grid[i]), key=grid[i].count)

        # Check if the most frequent value is in the central column
        if most_frequent_value in grid[i][cols // 2]:
            # Replace all other values in the row with the most frequent value
            for j in range(cols):
                if j != cols // 2:
                    grid[i][j] = most_frequent_value

    return grid",0.0,0
ba97ae07,3,"def transform(grid):
    rows = len(grid)
    cols = len(grid[0])

    # Identify the central strip
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] != 0:
                central_value = grid[i][j]
                # Check the surrounding values
                if i > 0 and i < rows - 1 and j > 0 and j < cols - 1:
                    if grid[i-1][j] == grid[i+1][j] and grid[i-1][j] != central_value:
                        grid[i][j] = grid[i-1][j]
                    elif grid[i][j-1] == grid[i][j+1] and grid[i][j-1] != central_value:
                        grid[i][j] = grid[i][j-1]

    return grid",0.8825,0
ba97ae07,4,"def transform(grid):
    # Determine the dimensions of the grid
    rows = len(grid)
    cols = len(grid[0])

    # Create a copy of the grid to store the transformed values
    transformed_grid = [row[:] for row in grid]

    # Iterate over each row in the grid
    for i in range(rows):
        # Iterate over each column in the row
        for j in range(cols):
            # Check if the current cell is part of the central column
            if j == cols // 2:
                # Check the surrounding rows for a different value
                if i > 0 and i < rows - 1:
                    if grid[i-1][j] != grid[i][j] and grid[i+1][j] != grid[i][j]:
                        # Replace the central column value with the surrounding value
                        transformed_grid[i][j] = grid[i-1][j] if grid[i-1][j] != 0 else grid[i+1][j]

    return transformed_grid",0.8825,0
ba97ae07,5,"def transform(grid):
    def merge_row(row):
        merged = []
        i = 0
        while i < len(row):
            if row[i] != 0:
                start = i
                while i < len(row) and row[i] != 0:
                    i += 1
                merged.extend([row[start]] * (i - start))
            else:
                merged.append(0)
                i += 1
        return merged

    return [merge_row(row) for row in grid]",0.8925,1
